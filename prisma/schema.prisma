generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model demo_files {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  demo_user_id  String     @db.Uuid
  original_name String     @db.VarChar(255)
  file_type     String     @db.VarChar(100)
  file_size     BigInt
  public_url    String     @db.VarChar(500)
  storage_path  String     @db.VarChar(500)
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  demo_users    demo_users @relation(fields: [demo_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([demo_user_id], map: "idx_demo_files_demo_user_id")
}

model demo_users {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id String       @unique @db.VarChar(255)
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  expires_at DateTime?    @default(dbgenerated("(now() + '24:00:00'::interval)")) @db.Timestamptz(6)
  demo_files demo_files[]

  @@index([expires_at], map: "idx_demo_users_expires_at")
  @@index([session_id], map: "idx_demo_users_session_id")
}

model files {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  original_name String    @db.VarChar(255)
  name          String    @db.VarChar(255)
  storage_path  String    @db.VarChar(500)
  file_size     BigInt
  file_type     String    @db.VarChar(100)
  mime_type     String    @db.VarChar(100)
  folder_id     String?   @db.Uuid
  public_url    String?   @db.VarChar(500)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  folders       folders?  @relation(fields: [folder_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([folder_id], map: "idx_files_folder_id")
  @@index([user_id], map: "idx_files_user_id")
}

model folders {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  name          String    @db.VarChar(255)
  parent_id     String?   @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  files         files[]
  folders       folders?  @relation("foldersTofolders", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_folders folders[] @relation("foldersTofolders")
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([parent_id], map: "idx_folders_parent_id")
  @@index([user_id], map: "idx_folders_user_id")
}

model users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique @db.VarChar(255)
  password_hash String?   @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  files         files[]
  folders       folders[]
}
